name: Fetch Layoff/Retirement News (daily)

on:
  schedule:
    - cron: '30 22 * * *' # 07:30 JST
  workflow_dispatch: {}

jobs:
  fetch:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    env:
      TZ: Asia/Tokyo
      SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python deps
        run: |
          python -m pip install --upgrade pip
          pip install feedparser rapidfuzz regex requests python-dateutil

      - name: Run collector
        run: |
          python scripts/fetch_layoff_news.py --feeds scripts/layoff_feeds.txt --output data/layoff_news.json --max-items 100 --log-dir logs
      
      - name: Upload logs artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: layoff-logs-${{ github.run_id }}-${{ github.run_attempt }}
          path: logs/*.jsonl
          retention-days: 30

      - name: Slack notify on failure
        if: failure() && env.SLACK_WEBHOOK_URL != ''
        run: |
          curl -X POST -H 'Content-type: application/json' \
            --data '{"text":"Layoff collector failed: ${{ github.repository }} run ${{ github.run_id }}"}' \
            "$SLACK_WEBHOOK_URL"
        shell: bash

      - name: Open GitHub Issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const title = `Layoff collector failed â€“ ${new Date().toISOString().slice(0,10)}`;
            const body = [
              `The scheduled workflow failed.`,
              `Run: ${context.runNumber} (attempt ${context.runAttempt})`,
              `Logs artifact is attached to the workflow run.`,
            ].join('\n');
            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title,
              body,
              labels: ['automation','incident']
            });

      - name: Keep last 30 days logs
        run: |
          if [ -d logs ]; then
            find logs -type f -name 'fetch_*.jsonl' -mtime +30 -delete || true
          fi

      - name: Commit and push if changed
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            git config user.name "github-actions"
            git config user.email "github-actions@users.noreply.github.com"
            git add data/layoff_news.json || true
            git commit -m "chore(data): update layoff_news.json (scheduled)"
            git push
          else
            echo "No changes"
          fi
